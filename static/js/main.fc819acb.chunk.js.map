{"version":3,"sources":["Header/index.js","Footer/index.js","Container/index.js","SectionHeader/index.js","Emoji/index.js","Section/index.js","Legend/index.js","Label/index.js","Button/index.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","Footer","Container","children","SectionHeader","emoji","Emoji","symbol","label","role","aria-label","aria-hidden","Section","header","form","Legend","Label","name","min","step","required","readonly","placeholder","defaultValue","type","readOnly","Button","Form","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6XASeA,G,UANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,4BAAQC,UAAU,UAClB,4BAAKD,MCIME,G,MANA,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAH,OACX,4BAAQC,UAAU,UACbD,KCIMG,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAAKH,UAAU,aACVG,KCKMC,G,MAPO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAON,EAAV,EAAUA,MAAV,OAElB,wBAAIC,UAAU,eACTK,EAAON,KCMDO,EAVD,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,MAAV,OACV,0BACIC,KAAK,MACLC,aAAYF,GAAgB,GAC5BG,cAAaH,EAAQ,QAAU,QAE9BD,ICCMK,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAX,OACZ,6BAASd,UAAU,WACda,EACAC,ICIMC,G,YANA,SAAC,GAAD,IAAEhB,EAAF,EAAEA,MAAF,OACX,4BAAQC,UAAU,mBACbD,KCyBMiB,G,MA3BD,SAAC,GAAD,IAAGjB,EAAH,EAAGA,MAAOkB,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,IAAKC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAAUC,EAA/C,EAA+CA,YAAaC,EAA5D,EAA4DA,aAA5D,OAEV,2BACI,+BACI,0BAAMvB,UAAU,kBAAkBD,GAClC,0BAAMC,UAAU,qBACZ,2BACIA,UAAU,iBACVwB,KAAK,SACLP,KAAMA,EACNC,IAAKA,EACLC,KAAMA,EACNC,SAAUA,EACVE,YAAaA,EACbG,SAAUJ,IAEd,4BAAQrB,UAAU,kBAAkBuB,aAAcA,GAC9C,uCACA,uCACA,uCACA,6CCbLG,G,MAPA,SAAC,GAAD,IAAG3B,EAAH,EAAGA,MAAH,OACX,2BACI,4BAAQC,UAAU,mBAAmBD,GACrC,0BAAMC,UAAU,wBCiCT2B,EAjCF,kBAET,8BACI,8BAAU3B,UAAU,qBAEf,kBAAC,EAAD,CAAQD,MAAM,mBAEd,kBAAC,EAAD,CACGA,MAAM,2BACNkB,KAAK,mBACLC,IAAI,MACJC,KAAK,OACLC,UAAU,EACVE,YAAY,mBACZC,aAAa,QAIhB,kBAAC,EAAD,CACGxB,MAAM,YACNkB,KAAK,kBACLI,UAAU,EACVE,aAAa,QAIhB,kBAAC,EAAD,CAAQxB,MAAM,oBCCZ6B,MAxBf,WACE,OAEE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQ7B,MAAM,qBAEd,kBAAC,EAAD,CACEc,OACE,kBAAC,EAAD,CACER,MAAO,kBAAC,EAAD,CAAOE,OAAO,eAAKC,MAAM,SAChCT,MAAM,uCAIVe,KAAM,kBAAC,EAAD,QAGR,kBAAC,EAAD,CAAQf,MAAM,oFCfA8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc819acb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = ({title}) => (\n    <header className=\"header\">\n    <h1>{title}</h1>\n</header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = ({ title }) => (\n    <footer className=\"footer\">\n        {title}\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst Container = ({ children }) => (\n    <div className=\"container\">\n        {children}\n    </div>\n);\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nconst SectionHeader = ({ emoji, title }) => (\n\n    <h2 className=\"section__h2\">\n        {emoji}{title}\n    </h2>\n);\n\nexport default SectionHeader;","import React from 'react';\n\nconst Emoji = ({symbol, label}) => (\n    <span\n        role=\"img\"\n        aria-label={label ? label : \"\"}\n        aria-hidden={label ? \"false\" : \"true\"}\n    >\n        {symbol}\n    </span>\n);\n\nexport default Emoji;","import React from \"react\";\n\nconst Section = ({ header, form }) => (\n    <section className=\"section\">\n        {header}\n        {form}\n    </section>\n);\n\nexport default Section;","import React from \"react\";\nimport \"./style.css\";\n\nconst Legend = ({title}) => (\n    <legend className=\"section__legend\">\n        {title}\n    </legend>\n);\n\nexport default Legend;","import React from \"react\";\nimport \"./style.css\";\n\nconst Label = ({ title, name, min, step, required, readonly, placeholder, defaultValue }) => (\n\n    <p>\n        <label>\n            <span className=\"section__label\">{title}</span>\n            <span className=\"section__inputBox\">\n                <input\n                    className=\"section__input\"\n                    type=\"number\"\n                    name={name}\n                    min={min}\n                    step={step}\n                    required={required}\n                    placeholder={placeholder}\n                    readOnly={readonly}\n                />\n                <select className=\"section__select\" defaultValue={defaultValue}>\n                    <option>PLN</option>\n                    <option>USD</option>\n                    <option>EUR</option>\n                    <option>CHF</option>\n                </select>\n            </span>\n        </label>\n    </p>\n);\n\nexport default Label;","import React from \"react\";\nimport \"./style.css\";\n\nconst Button = ({ title }) => (\n    <p>\n        <button className=\"section__button\">{title}</button>\n        <span className=\"section__message\"></span>\n    </p>\n);\n\nexport default Button;","import React from \"react\";\nimport \"./style.css\";\nimport Legend from \"../Legend\";\nimport Label from \"../Label\";\nimport Button from \"../Button\";\n\nconst Form = () => (\n\n    <form>\n        <fieldset className=\"section__fieldset\">\n\n            {<Legend title=\"Wymiana waluty\" />}\n\n            {<Label\n                title=\"ChcÄ™ wymieniÄ‡:\"\n                name=\"amountToExchange\"\n                min=\"1.0\"\n                step=\"0.01\"\n                required={true}\n                placeholder=\"Wpisz kwotÄ™\"\n                defaultValue=\"PLN\"\n            />\n            }\n\n            {<Label\n                title=\"Otrzymam:\"\n                name=\"exchangedAmount\"\n                readonly={true}\n                defaultValue=\"USD\"\n            />\n            }\n\n            {<Button title=\"KupujÄ™!\" />}\n\n        </fieldset>\n    </form>\n\n);\n\nexport default Form;","import React from 'react';\nimport Header from \"./Header\"\nimport Footer from './Footer';\nimport Container from './Container';\nimport SectionHeader from './SectionHeader';\nimport Emoji from './Emoji';\nimport Section from \"./Section\";\nimport Form from \"./Form\";\n\nfunction App() {\n  return (\n\n    <Container>\n\n      <Header title=\"Kalkulator walut\" />\n\n      <Section\n        header={\n          <SectionHeader\n            emoji={<Emoji symbol=\"ðŸ”’\" label=\"lock\" />}\n            title=\"Bezpieczna wymiana przez internet!\"\n          />\n        }\n\n        form={<Form />}\n      />\n\n      <Footer title=\"Â© Copyright by MichaÅ‚ Adamczyk 2020. Wszelkie prawa zastrzeÅ¼one!\" />\n\n    </Container >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}